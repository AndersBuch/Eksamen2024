      <div class="dashboard">

    <!-- Main Content -->
    <main class="main-content">
      <header>
        <button class="sidebar-toggle">â˜°</button>
        <h1>Users</h1>
      </header>

      <!-- Navigation/Search -->
      <div class="search-bar">
        <input type="text" placeholder="Search...">
        <div class="search-icon">
          <img src="../img/1st trailing-icon.svg" alt="Search Icon">
        </div>
      </div>

      <!-- Project Table -->
      <div class="project-table">

        <!-- Table Header (Make sure this stays) -->
        <div class="table-header-users">
          <span>User Name</span>
          <span>Email</span>
          <span>Admin?</span>
          <span>Actions</span>
        </div>
        {{#each users}}
        <div class="row-container-users">
          <div class="table-row-users" class="table-row-users" data-user-id="{{this.user_id}}">
            <span>{{this.user_name}}</span>
            <span>{{this.email}}</span>
            {{#if this.admin}}
            <span>yes</span>
            {{else}}
            <span>No</span>
            {{/if}}
            <span class="actions-users">
              <button data-open-manageuser type="button" class="manage-user-btn">Manage User</button>
            </span>
          </div>
        </div>
        {{/each}}
      </div>
    </main>
  </div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const openManageUsers = document.querySelectorAll("[data-open-manageuser]");
  const manageUsersModal = document.querySelector("[data-manage-user]");
  const form = manageUsersModal.querySelector("form");
  const deleteUserButton = manageUsersModal.querySelector("[data-delete-user]"); // Correctly attach the button here
  const modalTitle = manageUsersModal.querySelector("h1"); // Select the <h1> element

  openManageUsers.forEach(button => {
    button.addEventListener("click", async () => {
      const userId = button.closest(".table-row-users").getAttribute("data-user-id");

      try {
        const response = await fetch(`/get-user/${userId}`);
        if (!response.ok) throw new Error("Failed to fetch user data");
        const user = await response.json();

        // Populate modal fields
        form.querySelector('input[name="changeName"]').value = user.user_name;
        form.querySelector('input[name="changeEmail"]').value = user.email;
        form.querySelector('input[name="changePassword"]').value = user.password;

        // Set checkbox based on admin status
        const isAdminCheckbox = form.querySelector('input[name="isAdmin"]');
        isAdminCheckbox.checked = user.admin === 1; // Check if the user is an admin

        form.querySelector('button[type="submit"]').setAttribute("data-user-id", userId);

        // Update the modal's title with the user's name
        modalTitle.textContent = `Manage User "${user.user_name}"`;

        manageUsersModal.showModal();
      } catch (error) {
        console.error(error);
        alert("Failed to load user details");
      }
    });
  });

  document.getElementById("cancel-button").addEventListener("click", (event) => {
  event.preventDefault(); // Prevent default form behavior
  manageUsersModal.close(); // Close the modal explicitly
  console.log("Modal canceled by user.");
});

  // Handle form submission
  form.addEventListener("submit", async (event) => {

    event.preventDefault();
    const userId = form.querySelector('button[type="submit"]').getAttribute("data-user-id");
    const userName = form.querySelector('input[name="changeName"]').value;
    const email = form.querySelector('input[name="changeEmail"]').value;
    const password = form.querySelector('input[name="changePassword"]').value;
    const isAdmin = form.querySelector('input[name="isAdmin"]').checked;

      // **Form Validation**
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}$/;
    let errors = [];

    if (userName.length < 2) {
      errors.push("Name must be at least 2 characters.");
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      errors.push("Please enter a valid email address.");
    }

 

    if (!passwordRegex.test(password)) {
      errors.push(
        "Password must be at least 6 characters long, include at least one uppercase letter, one lowercase letter, and one number."
      );
    }

    if (errors.length > 0) {
      alert("Please fix the following errors:\n" + errors.join("\n"));
      return;
    }

    try {
      const response = await fetch("/update-user", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, userName, email, password, isAdmin }),
      });

      if (response.ok) {
        alert("User details updated successfully");
        window.location.reload();
      } else {
        const error = await response.json();
        alert("Error: " + error.message);
      }
    } catch (error) {
      console.error(error);
      alert("Failed to update user details");
    }
  });

  // Handle delete user button inside the modal
deleteUserButton.addEventListener("click", async () => {
  const userId = manageUsersModal.querySelector('button[type="submit"]').getAttribute("data-user-id");

  if (!userId) {
    console.error("User ID not found");
    return alert("Failed to find user ID");
  }

  const confirmDelete = confirm("Are you sure you want to delete this user?");
  if (!confirmDelete) return;

  try {
    const response = await fetch("/delete-user", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ userId }),
    });

    console.log("Response:", response);

    if (response.ok) {
      const data = await response.json(); // Parse success message
      console.log("Delete successful:", data.message);
      alert(data.message); // Alert the success message
      manageUsersModal.close(); // Close the modal
      window.location.reload(); // Refresh the page
    } else if (response.status === 404) {
      // Handle user-not-found error
      const error = await response.json();
      console.warn("Delete warning:", error.message);
      alert("Error: " + error.message);
    } else {
      // Handle unexpected errors
      const error = await response.json();
      console.error("Delete error:", error.message);
      alert("Error: " + error.message);
    }
  } catch (error) {
    console.error("Unexpected error:", error);
    alert("Failed to delete user");
  }
});
});

</script>

<dialog data-manage-user class="manage-users-model">
  <h1>Manage User "{{this.user_name}}"</h1>
  <form action="">
    <div>
      <label for="changeName">Name</label>
      <input type="text" name="changeName" value="{{this.user_name}}">
    </div>
    <div>
      <label for="changeEmail">Email</label>
      <input type="email" name="changeEmail" value="{{this.email}}">
    </div>
    <div>
      <label for="changePassword">Password</label>
      <input type="text" name="changePassword" value="{{this.password}}">
    </div>

    <div class="adminBox">
      <label for="isAdmin">Admin</label>
      <input type="checkbox" id="isAdmin" name="isAdmin" {{#if this.admin}}checked{{/if}}>
    </div>

    <div class="manageUserBtnContainer">
      <button data-delete-user type="button" class="delete-user-btn">Delete</button>
      <button formmethod="dialog" id="cancel-button" type="submit">Cancel</button>
      <button type="submit">Save</button>
    </div>
  </form>
</dialog>






